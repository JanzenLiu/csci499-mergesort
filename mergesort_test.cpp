#include "mergesort.h"

#include <vector>

#include <gtest/gtest.h>

using std::vector;

// Assume expected_tmp.size() == size. Because `size` is given by the test
// programmer, so its correctness does not depend on the target function.
#define TEST_PARSE_INPUT(expected_tmp, str, size) {{ \
    vector<int> expected = expected_tmp; \
    int* actual = ParseInput(str, size); \
    for (int i = 0; i < size; ++i) { \
        EXPECT_EQ(expected[i], actual[i]); \
    } \
    free(actual); \
}};

// Assume expected_tmp.size() == input_tmp.size() Because both are given by
// the test programmer, so its correctness does not depend on the target function.
#define TEST_MERGESORT(expected_tmp, input_tmp) {{ \
    vector<int> expected = expected_tmp; \
    vector<int> input = input_tmp; \
    int size = input.size(); \
    int* actual = input.data(); \
    MergeSort(actual, size); \
    for (int i = 0; i < size; ++i) { \
        EXPECT_EQ(expected[i], actual[i]); \
    } \
}}

TEST(ParseInputTest, HandlesNegativeNumber) {
    TEST_PARSE_INPUT(vector<int>({-1, 2, -3, 4}), "-1 2 -3 4", 4);
    TEST_PARSE_INPUT(vector<int>({-10931, -654, -14866, -12969, -8566, -4377 }), "-10931 -654 -14866 -12969 -8566 -4377", 6);
    TEST_PARSE_INPUT(vector<int>({-19956, -8724, -15440, -12061, -10539, -842, -4157, -10820, -7778}),
                     "-19956 -8724 -15440 -12061 -10539 -842 -4157 -10820 -7778", 9);
    TEST_PARSE_INPUT(vector<int>({-93, 370, -152, 350, 233, -185, -36, 361, -280, 117, 268, 379, -180,
                                  287, 220, -327, -414, -128, -463, 209, 90, 285, 493, 77, -328}),
                     "-93 370 -152 350 233 -185 -36 361 -280 117 268 379 -180 287 220 -327 -414 -128 "
                     "-463 209 90 285 493 77 -328", 25);
}

TEST(ParseInputTest, HandlesLargeNumber) {
    TEST_PARSE_INPUT(vector<int>({606441108, 957222400, 581744645, 963544895, 832318838}),
                     "606441108 957222400 581744645 963544895 832318838", 5);
    TEST_PARSE_INPUT(vector<int>({380741347, 771155217, 244479155, 822778629, 237385094}), 
                     "380741347 771155217 244479155 822778629 237385094", 5);
    TEST_PARSE_INPUT(vector<int>({762576235, 419113852, 381830110, 408633821, 323249177, 
                                  786576828, 541379478, 281940275, 919317713, 195445906}), 
                     "762576235 419113852 381830110 408633821 323249177 786576828 "
                     "541379478 281940275 919317713 195445906", 10);
}

TEST(ParseInputTest, HandlesLargeArray) {
    TEST_PARSE_INPUT(vector<int>({29, 449, 549, 662, 637, 298, 757, 754, 414, 281, 174, 555, 90, 397, 48, 303, 636, 461, 725, 883, 952, 722, 675, 131, 666, 331, 906, 768, 911, 805, 146, 760, 968, 656, 443, 820, 599, 120, 202, 28, 779, 923, 640, 763, 957, 166, 465, 309, 335, 212, 467, 234, 338, 49, 148, 978, 540, 266, 127, 816, 165, 324, 261, 954, 416, 239, 413, 796, 759, 857, 68, 810, 997, 962, 627, 442, 616, 216, 980, 604, 899, 80, 551, 850, 692, 399, 167, 772, 693, 377, 237, 356, 530, 505, 964, 236, 674, 843, 344, 398, 804, 814, 687, 892, 647, 141, 792, 268, 548, 610, 155, 665, 645, 15, 882, 566, 887, 173, 781, 111, 771, 121, 782, 908, 535, 532, 453, 23, 132, 839, 380, 350, 507, 393, 124, 649, 956, 35, 10, 633, 514, 252, 870, 81, 441, 695, 683, 552, 476, 246, 790, 893, 295, 176, 774, 460, 280, 508, 628, 613, 927, 469, 564, 623, 180, 5, 407, 463, 715, 639, 853, 998, 153, 849, 934, 135, 812, 612, 690, 291, 383, 704, 776, 52, 152, 7, 578, 965, 777, 411, 709, 256, 864, 744, 713, 742, 593, 563, 946, 171}),
                     "29 449 549 662 637 298 757 754 414 281 174 555 90 397 48 303 636 461 725 883 952 722 675 131 666 331 906 768 911 805 146 760 968 656 443 820 599 120 202 28 779 923 640 763 957 166 465 309 335 212 467 234 338 49 148 978 540 266 127 816 165 324 261 954 416 239 413 796 759 857 68 810 997 962 627 442 616 216 980 604 899 80 551 850 692 399 167 772 693 377 237 356 530 505 964 236 674 843 344 398 804 814 687 892 647 141 792 268 548 610 155 665 645 15 882 566 887 173 781 111 771 121 782 908 535 532 453 23 132 839 380 350 507 393 124 649 956 35 10 633 514 252 870 81 441 695 683 552 476 246 790 893 295 176 774 460 280 508 628 613 927 469 564 623 180 5 407 463 715 639 853 998 153 849 934 135 812 612 690 291 383 704 776 52 152 7 578 965 777 411 709 256 864 744 713 742 593 563 946 171",
                     200);
}

TEST(ParseInputTest, HandlesWrongSize) {
    TEST_PARSE_INPUT(vector<int>({872, 991, 731, 646, 635, 207, 181,
                                  779, 147, 340, 0, 0, 0, 0, 0}),
                     "872 991 731 646 635 207 181 779 147 340", 15);
    TEST_PARSE_INPUT(vector<int>({136, 803, 299, 210, 596}),
                     "136 803 299 210 596 411 327 261 508 852", 5);
}


TEST(ParseInputTest, HandlesInvalidInput) {
    EXPECT_EQ(ParseInput("Hello World!", 2), nullptr);
    EXPECT_EQ(ParseInput("211 596 516 3&0 297 7 526 478 306 933", 10), nullptr);
    EXPECT_EQ(ParseInput("62 558 370+12 638^2 787 805 (707) 147", 9), nullptr);
    EXPECT_EQ(ParseInput("118 900^2 812/ 411 +953 74", 6), nullptr);
    EXPECT_EQ(ParseInput("1598 752 - 803 287", 5), nullptr);
    EXPECT_EQ(ParseInput("387 2&1 485 517", 4), nullptr);
    EXPECT_EQ(ParseInput("0x3FFF, 0x66", 2), nullptr);
}

TEST(MergeSortTest, HandlesSmallArray) {
    TEST_MERGESORT(vector<int>({}), vector<int>({}));
    TEST_MERGESORT(vector<int>({100}), vector<int>({100}));
    TEST_MERGESORT(vector<int>({24, 42}), vector<int>({24, 42}));
    TEST_MERGESORT(vector<int>({18, 55}), vector<int>({55, 18}));
    TEST_MERGESORT(vector<int>({2, 3, 5}), vector<int>({5, 2, 3}));
}

TEST(MergeSortTest, HandlesNormalSizeArray) {
    TEST_MERGESORT(vector<int>({1, 2, 3, 4, 5}), vector<int>({2, 4, 1, 5, 3}));
    TEST_MERGESORT(vector<int>({-815, -730, -574, -104, 188, 220, 586, 657, 823, 990}),
                   vector<int>({-574, -104, -730, 586, 990, 188, 220, 823, 657, -815}));
    TEST_MERGESORT(vector<int>({-943, -738, -634, -259, -165, -120, -63, -53,
                                -37, 39, 70, 148, 172, 182, 235, 277, 344, 355,
                                359, 367, 375, 468, 530, 606, 703, 760, 761,
                                774, 826, 853}),
                   vector<int>({-53, 344, 39, -165, 375, 761, 774, 235, 826,
                                703, 530, -259, 468, 172, 70, 359, -943, -120,
                                606, 277, -63, 367, -37, -634, -738, 853, 355,
                                148, 182, 760}));
}

TEST(MergeSortTest, HandlesLargeArray) {
    TEST_MERGESORT(vector<int>({-1000, -998, -997, -986, -983, -977, -976, -972, -969, -953, -947, -945, -944, -942, -938, -937, -935, -931, -930, -929, -927, -926, -922, -921, -920, -915, -905, -898, -897, -893, -890, -883, -879, -868, -867, -865, -861, -843, -842, -841, -837, -832, -823, -821, -814, -811, -798, -792, -791, -782, -780, -779, -778, -771, -769, -761, -759, -757, -756, -745, -744, -730, -727, -717, -716, -714, -710, -698, -695, -687, -681, -679, -666, -665, -664, -663, -662, -653, -651, -641, -638, -637, -634, -630, -611, -594, -593, -589, -577, -574, -572, -565, -552, -544, -543, -542, -537, -536, -535, -533, -523, -522, -518, -517, -516, -512, -507, -505, -504, -499, -496, -494, -493, -492, -487, -486, -485, -478, -475, -474, -473, -472, -468, -464, -461, -459, -457, -456, -454, -453, -448, -447, -442, -441, -433, -432, -430, -429, -426, -424, -421, -420, -418, -414, -398, -396, -395, -391, -387, -380, -379, -373, -365, -363, -360, -356, -353, -346, -340, -338, -335, -333, -332, -331, -330, -327, -326, -325, -322, -321, -319, -317, -309, -306, -304, -302, -293, -291, -288, -286, -283, -281, -280, -277, -267, -264, -257, -254, -249, -248, -242, -236, -215, -211, -207, -206, -200, -199, -196, -193, -192, -188, -184, -182, -175, -173, -167, -163, -160, -158, -147, -145, -140, -139, -133, -129, -120, -118, -115, -110, -109, -103, -83, -82, -79, -68, -60, -57, -43, -41, -35, -34, -33, -32, -31, -29, -28, -18, -15, -11, -10, -9, -5, -4, -3, 3, 6, 17, 18, 30, 32, 35, 40, 43, 47, 53, 56, 59, 61, 65, 66, 68, 71, 77, 83, 90, 91, 93, 94, 96, 98, 102, 104, 108, 132, 135, 137, 138, 141, 142, 144, 147, 148, 159, 163, 164, 171, 173, 175, 176, 177, 178, 186, 191, 195, 201, 206, 207, 210, 213, 215, 217, 232, 233, 240, 243, 248, 254, 261, 265, 280, 287, 291, 295, 298, 304, 312, 328, 332, 335, 338, 339, 343, 344, 346, 348, 350, 357, 364, 366, 368, 369, 372, 374, 376, 385, 388, 390, 391, 396, 397, 402, 403, 404, 407, 408, 412, 413, 415, 417, 418, 419, 423, 426, 430, 433, 439, 440, 441, 445, 446, 450, 454, 455, 458, 459, 469, 470, 471, 473, 475, 476, 477, 481, 491, 495, 500, 505, 508, 510, 523, 531, 532, 533, 534, 539, 540, 543, 545, 549, 555, 557, 560, 563, 565, 567, 569, 570, 572, 574, 575, 576, 589, 595, 598, 599, 601, 602, 605, 607, 610, 612, 615, 616, 618, 626, 629, 639, 642, 652, 653, 659, 660, 666, 673, 675, 678, 688, 695, 699, 701, 703, 708, 712, 715, 717, 720, 721, 731, 733, 734, 737, 739, 744, 747, 748, 749, 752, 755, 758, 759, 760, 765, 773, 775, 777, 786, 787, 788, 793, 796, 801, 806, 808, 813, 814, 817, 832, 838, 851, 853, 854, 859, 860, 880, 885, 891, 897, 898, 899, 905, 907, 912, 913, 916, 923, 925, 928, 936, 938, 952, 953, 958, 962, 971, 977, 979, 992, 994, 997}),
                   vector<int>({-641, -630, 936, 688, -459, -1000, 469, 265, 261, -277, 91, 532, -333, -391, -456, -823, 977, 404, -716, 555, 885, -398, -926, 737, 701, 589, -28, -486, 775, 481, 43, 454, 569, -782, -365, -387, -492, 899, 605, -544, 565, 610, -811, 243, 413, 430, 132, -3, -832, -969, 372, 601, 997, 540, -698, 731, -572, 65, 338, -523, -464, -942, 248, -326, 838, 720, -977, -396, 40, 788, 923, -537, 426, 364, -283, -18, -327, 574, 905, -634, -518, -472, 186, 173, -133, 599, -380, 523, -710, -791, -944, 90, 912, -779, 992, -184, -207, 419, -687, -769, -82, 773, 102, -429, -922, -291, -293, 441, -110, -536, 721, 232, -666, -140, -920, -420, -533, 545, -395, 291, 147, 801, 925, 897, 254, 450, 30, -418, -286, -929, 994, 433, 458, -103, 563, 602, -589, 560, 755, 699, 508, 612, -426, 505, 135, 734, -717, 539, 298, 207, -496, -662, -679, -5, -442, -335, 233, -302, 626, -947, -744, -927, 717, 796, 396, 71, 171, 215, 891, 144, 749, 357, -193, -360, 629, -34, -330, -543, 786, -651, -937, -432, 814, -714, 928, -945, 739, -447, -120, 575, 61, -317, 660, 971, -236, 666, 806, -363, 445, 137, -441, -474, 83, -867, -841, 213, -798, -175, 35, 653, -868, -893, 163, 572, -865, -663, 176, -695, 534, 607, -997, 53, 695, -147, 549, -664, -139, -935, -504, -517, 659, -837, -745, -905, -757, 191, 440, 598, 510, -454, 439, -267, 217, 760, 94, -485, -457, 860, 715, -31, -761, -10, 108, 390, -248, -986, 68, 423, -199, 979, 175, 417, 758, -254, -730, 618, 148, 744, -998, -280, -879, 206, 407, 938, 459, 703, -68, -593, 567, -332, 18, 898, 907, 141, 287, 851, -983, -118, 733, -842, -281, 958, -516, 397, 475, -32, -33, 570, 418, -200, -552, -792, 446, -421, -780, -890, 93, 533, -242, -468, -512, -356, -542, 777, 195, 295, 328, -264, -211, 543, 652, 412, 164, -158, 712, 500, 339, -475, 576, 952, 47, 880, 408, -196, 201, -574, 471, -306, -843, -972, 793, 477, -346, 813, 473, 335, 787, 17, 759, 962, -771, 240, 455, -565, -167, -83, 344, -638, 557, -309, -494, -57, 470, -145, -129, 402, -424, 808, -321, -499, 350, 346, 3, -898, -414, -814, 752, -473, -778, -493, 531, 765, -756, 332, -338, -353, -430, 376, 178, -505, 415, -257, -331, 642, -379, -60, 495, 348, -109, 280, 391, -727, -15, 673, 385, 747, -43, 748, 304, 859, -931, -433, -11, -288, 678, -206, -215, -163, 32, -182, -915, 616, 66, -453, -325, 953, 96, 388, -173, -535, 913, -665, -507, -976, -322, 59, 368, -897, -478, -4, 6, 104, -188, -637, -79, 159, 832, -883, 138, 916, -930, -861, -953, -9, -340, -448, -35, -577, -487, -115, 366, -759, 343, 210, -304, -249, -611, -461, -921, -522, 639, 142, 595, -319, 853, 854, -373, 817, 675, 56, -41, 491, -821, 98, 374, 615, -29, 77, 312, -938, -160, 403, 476, -192, 369, 708, -594, -653, 177, -681}));
}